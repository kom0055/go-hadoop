//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: mr_protos.proto

package common

import (
	api "github.com/kom0055/go-hadoop/proto/yarn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskTypeProto int32

const (
	TaskTypeProto_MAP    TaskTypeProto = 1
	TaskTypeProto_REDUCE TaskTypeProto = 2
)

// Enum value maps for TaskTypeProto.
var (
	TaskTypeProto_name = map[int32]string{
		1: "MAP",
		2: "REDUCE",
	}
	TaskTypeProto_value = map[string]int32{
		"MAP":    1,
		"REDUCE": 2,
	}
)

func (x TaskTypeProto) Enum() *TaskTypeProto {
	p := new(TaskTypeProto)
	*p = x
	return p
}

func (x TaskTypeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskTypeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_mr_protos_proto_enumTypes[0].Descriptor()
}

func (TaskTypeProto) Type() protoreflect.EnumType {
	return &file_mr_protos_proto_enumTypes[0]
}

func (x TaskTypeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaskTypeProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaskTypeProto(num)
	return nil
}

// Deprecated: Use TaskTypeProto.Descriptor instead.
func (TaskTypeProto) EnumDescriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{0}
}

type TaskStateProto int32

const (
	TaskStateProto_TS_NEW       TaskStateProto = 1
	TaskStateProto_TS_SCHEDULED TaskStateProto = 2
	TaskStateProto_TS_RUNNING   TaskStateProto = 3
	TaskStateProto_TS_SUCCEEDED TaskStateProto = 4
	TaskStateProto_TS_FAILED    TaskStateProto = 5
	TaskStateProto_TS_KILLED    TaskStateProto = 6
)

// Enum value maps for TaskStateProto.
var (
	TaskStateProto_name = map[int32]string{
		1: "TS_NEW",
		2: "TS_SCHEDULED",
		3: "TS_RUNNING",
		4: "TS_SUCCEEDED",
		5: "TS_FAILED",
		6: "TS_KILLED",
	}
	TaskStateProto_value = map[string]int32{
		"TS_NEW":       1,
		"TS_SCHEDULED": 2,
		"TS_RUNNING":   3,
		"TS_SUCCEEDED": 4,
		"TS_FAILED":    5,
		"TS_KILLED":    6,
	}
)

func (x TaskStateProto) Enum() *TaskStateProto {
	p := new(TaskStateProto)
	*p = x
	return p
}

func (x TaskStateProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStateProto) Descriptor() protoreflect.EnumDescriptor {
	return file_mr_protos_proto_enumTypes[1].Descriptor()
}

func (TaskStateProto) Type() protoreflect.EnumType {
	return &file_mr_protos_proto_enumTypes[1]
}

func (x TaskStateProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaskStateProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaskStateProto(num)
	return nil
}

// Deprecated: Use TaskStateProto.Descriptor instead.
func (TaskStateProto) EnumDescriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{1}
}

type PhaseProto int32

const (
	PhaseProto_P_STARTING PhaseProto = 1
	PhaseProto_P_MAP      PhaseProto = 2
	PhaseProto_P_SHUFFLE  PhaseProto = 3
	PhaseProto_P_SORT     PhaseProto = 4
	PhaseProto_P_REDUCE   PhaseProto = 5
	PhaseProto_P_CLEANUP  PhaseProto = 6
)

// Enum value maps for PhaseProto.
var (
	PhaseProto_name = map[int32]string{
		1: "P_STARTING",
		2: "P_MAP",
		3: "P_SHUFFLE",
		4: "P_SORT",
		5: "P_REDUCE",
		6: "P_CLEANUP",
	}
	PhaseProto_value = map[string]int32{
		"P_STARTING": 1,
		"P_MAP":      2,
		"P_SHUFFLE":  3,
		"P_SORT":     4,
		"P_REDUCE":   5,
		"P_CLEANUP":  6,
	}
)

func (x PhaseProto) Enum() *PhaseProto {
	p := new(PhaseProto)
	*p = x
	return p
}

func (x PhaseProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhaseProto) Descriptor() protoreflect.EnumDescriptor {
	return file_mr_protos_proto_enumTypes[2].Descriptor()
}

func (PhaseProto) Type() protoreflect.EnumType {
	return &file_mr_protos_proto_enumTypes[2]
}

func (x PhaseProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PhaseProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PhaseProto(num)
	return nil
}

// Deprecated: Use PhaseProto.Descriptor instead.
func (PhaseProto) EnumDescriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{2}
}

type TaskAttemptStateProto int32

const (
	TaskAttemptStateProto_TA_NEW            TaskAttemptStateProto = 1
	TaskAttemptStateProto_TA_STARTING       TaskAttemptStateProto = 2
	TaskAttemptStateProto_TA_RUNNING        TaskAttemptStateProto = 3
	TaskAttemptStateProto_TA_COMMIT_PENDING TaskAttemptStateProto = 4
	TaskAttemptStateProto_TA_SUCCEEDED      TaskAttemptStateProto = 5
	TaskAttemptStateProto_TA_FAILED         TaskAttemptStateProto = 6
	TaskAttemptStateProto_TA_KILLED         TaskAttemptStateProto = 7
)

// Enum value maps for TaskAttemptStateProto.
var (
	TaskAttemptStateProto_name = map[int32]string{
		1: "TA_NEW",
		2: "TA_STARTING",
		3: "TA_RUNNING",
		4: "TA_COMMIT_PENDING",
		5: "TA_SUCCEEDED",
		6: "TA_FAILED",
		7: "TA_KILLED",
	}
	TaskAttemptStateProto_value = map[string]int32{
		"TA_NEW":            1,
		"TA_STARTING":       2,
		"TA_RUNNING":        3,
		"TA_COMMIT_PENDING": 4,
		"TA_SUCCEEDED":      5,
		"TA_FAILED":         6,
		"TA_KILLED":         7,
	}
)

func (x TaskAttemptStateProto) Enum() *TaskAttemptStateProto {
	p := new(TaskAttemptStateProto)
	*p = x
	return p
}

func (x TaskAttemptStateProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskAttemptStateProto) Descriptor() protoreflect.EnumDescriptor {
	return file_mr_protos_proto_enumTypes[3].Descriptor()
}

func (TaskAttemptStateProto) Type() protoreflect.EnumType {
	return &file_mr_protos_proto_enumTypes[3]
}

func (x TaskAttemptStateProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaskAttemptStateProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaskAttemptStateProto(num)
	return nil
}

// Deprecated: Use TaskAttemptStateProto.Descriptor instead.
func (TaskAttemptStateProto) EnumDescriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{3}
}

type JobStateProto int32

const (
	JobStateProto_J_NEW       JobStateProto = 1
	JobStateProto_J_INITED    JobStateProto = 2
	JobStateProto_J_RUNNING   JobStateProto = 3
	JobStateProto_J_SUCCEEDED JobStateProto = 4
	JobStateProto_J_FAILED    JobStateProto = 5
	JobStateProto_J_KILLED    JobStateProto = 6
	JobStateProto_J_ERROR     JobStateProto = 7
)

// Enum value maps for JobStateProto.
var (
	JobStateProto_name = map[int32]string{
		1: "J_NEW",
		2: "J_INITED",
		3: "J_RUNNING",
		4: "J_SUCCEEDED",
		5: "J_FAILED",
		6: "J_KILLED",
		7: "J_ERROR",
	}
	JobStateProto_value = map[string]int32{
		"J_NEW":       1,
		"J_INITED":    2,
		"J_RUNNING":   3,
		"J_SUCCEEDED": 4,
		"J_FAILED":    5,
		"J_KILLED":    6,
		"J_ERROR":     7,
	}
)

func (x JobStateProto) Enum() *JobStateProto {
	p := new(JobStateProto)
	*p = x
	return p
}

func (x JobStateProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStateProto) Descriptor() protoreflect.EnumDescriptor {
	return file_mr_protos_proto_enumTypes[4].Descriptor()
}

func (JobStateProto) Type() protoreflect.EnumType {
	return &file_mr_protos_proto_enumTypes[4]
}

func (x JobStateProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *JobStateProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = JobStateProto(num)
	return nil
}

// Deprecated: Use JobStateProto.Descriptor instead.
func (JobStateProto) EnumDescriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{4}
}

type TaskAttemptCompletionEventStatusProto int32

const (
	TaskAttemptCompletionEventStatusProto_TACE_FAILED    TaskAttemptCompletionEventStatusProto = 1
	TaskAttemptCompletionEventStatusProto_TACE_KILLED    TaskAttemptCompletionEventStatusProto = 2
	TaskAttemptCompletionEventStatusProto_TACE_SUCCEEDED TaskAttemptCompletionEventStatusProto = 3
	TaskAttemptCompletionEventStatusProto_TACE_OBSOLETE  TaskAttemptCompletionEventStatusProto = 4
	TaskAttemptCompletionEventStatusProto_TACE_TIPFAILED TaskAttemptCompletionEventStatusProto = 5
)

// Enum value maps for TaskAttemptCompletionEventStatusProto.
var (
	TaskAttemptCompletionEventStatusProto_name = map[int32]string{
		1: "TACE_FAILED",
		2: "TACE_KILLED",
		3: "TACE_SUCCEEDED",
		4: "TACE_OBSOLETE",
		5: "TACE_TIPFAILED",
	}
	TaskAttemptCompletionEventStatusProto_value = map[string]int32{
		"TACE_FAILED":    1,
		"TACE_KILLED":    2,
		"TACE_SUCCEEDED": 3,
		"TACE_OBSOLETE":  4,
		"TACE_TIPFAILED": 5,
	}
)

func (x TaskAttemptCompletionEventStatusProto) Enum() *TaskAttemptCompletionEventStatusProto {
	p := new(TaskAttemptCompletionEventStatusProto)
	*p = x
	return p
}

func (x TaskAttemptCompletionEventStatusProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskAttemptCompletionEventStatusProto) Descriptor() protoreflect.EnumDescriptor {
	return file_mr_protos_proto_enumTypes[5].Descriptor()
}

func (TaskAttemptCompletionEventStatusProto) Type() protoreflect.EnumType {
	return &file_mr_protos_proto_enumTypes[5]
}

func (x TaskAttemptCompletionEventStatusProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaskAttemptCompletionEventStatusProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaskAttemptCompletionEventStatusProto(num)
	return nil
}

// Deprecated: Use TaskAttemptCompletionEventStatusProto.Descriptor instead.
func (TaskAttemptCompletionEventStatusProto) EnumDescriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{5}
}

type JobIdProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId *api.ApplicationIdProto `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Id    *int32                  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (x *JobIdProto) Reset() {
	*x = JobIdProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobIdProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobIdProto) ProtoMessage() {}

func (x *JobIdProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobIdProto.ProtoReflect.Descriptor instead.
func (*JobIdProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{0}
}

func (x *JobIdProto) GetAppId() *api.ApplicationIdProto {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *JobIdProto) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type TaskIdProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    *JobIdProto    `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	TaskType *TaskTypeProto `protobuf:"varint,2,opt,name=task_type,json=taskType,enum=hadoop.mapreduce.TaskTypeProto" json:"task_type,omitempty"`
	Id       *int32         `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (x *TaskIdProto) Reset() {
	*x = TaskIdProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIdProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdProto) ProtoMessage() {}

func (x *TaskIdProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdProto.ProtoReflect.Descriptor instead.
func (*TaskIdProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{1}
}

func (x *TaskIdProto) GetJobId() *JobIdProto {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *TaskIdProto) GetTaskType() TaskTypeProto {
	if x != nil && x.TaskType != nil {
		return *x.TaskType
	}
	return TaskTypeProto_MAP
}

func (x *TaskIdProto) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type TaskAttemptIdProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId *TaskIdProto `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Id     *int32       `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (x *TaskAttemptIdProto) Reset() {
	*x = TaskAttemptIdProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAttemptIdProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAttemptIdProto) ProtoMessage() {}

func (x *TaskAttemptIdProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAttemptIdProto.ProtoReflect.Descriptor instead.
func (*TaskAttemptIdProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{2}
}

func (x *TaskAttemptIdProto) GetTaskId() *TaskIdProto {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskAttemptIdProto) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CounterProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName *string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Value       *int64  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (x *CounterProto) Reset() {
	*x = CounterProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterProto) ProtoMessage() {}

func (x *CounterProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterProto.ProtoReflect.Descriptor instead.
func (*CounterProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{3}
}

func (x *CounterProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CounterProto) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CounterProto) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CounterGroupProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName *string                  `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Counters    []*StringCounterMapProto `protobuf:"bytes,3,rep,name=counters" json:"counters,omitempty"`
}

func (x *CounterGroupProto) Reset() {
	*x = CounterGroupProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterGroupProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterGroupProto) ProtoMessage() {}

func (x *CounterGroupProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterGroupProto.ProtoReflect.Descriptor instead.
func (*CounterGroupProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{4}
}

func (x *CounterGroupProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CounterGroupProto) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CounterGroupProto) GetCounters() []*StringCounterMapProto {
	if x != nil {
		return x.Counters
	}
	return nil
}

type CountersProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterGroups []*StringCounterGroupMapProto `protobuf:"bytes,1,rep,name=counter_groups,json=counterGroups" json:"counter_groups,omitempty"`
}

func (x *CountersProto) Reset() {
	*x = CountersProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountersProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountersProto) ProtoMessage() {}

func (x *CountersProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountersProto.ProtoReflect.Descriptor instead.
func (*CountersProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{5}
}

func (x *CountersProto) GetCounterGroups() []*StringCounterGroupMapProto {
	if x != nil {
		return x.CounterGroups
	}
	return nil
}

type TaskReportProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId            *TaskIdProto          `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	TaskState         *TaskStateProto       `protobuf:"varint,2,opt,name=task_state,json=taskState,enum=hadoop.mapreduce.TaskStateProto" json:"task_state,omitempty"`
	Progress          *float32              `protobuf:"fixed32,3,opt,name=progress" json:"progress,omitempty"`
	StartTime         *int64                `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime        *int64                `protobuf:"varint,5,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	Counters          *CountersProto        `protobuf:"bytes,6,opt,name=counters" json:"counters,omitempty"`
	RunningAttempts   []*TaskAttemptIdProto `protobuf:"bytes,7,rep,name=running_attempts,json=runningAttempts" json:"running_attempts,omitempty"`
	SuccessfulAttempt *TaskAttemptIdProto   `protobuf:"bytes,8,opt,name=successful_attempt,json=successfulAttempt" json:"successful_attempt,omitempty"`
	Diagnostics       []string              `protobuf:"bytes,9,rep,name=diagnostics" json:"diagnostics,omitempty"`
}

func (x *TaskReportProto) Reset() {
	*x = TaskReportProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReportProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReportProto) ProtoMessage() {}

func (x *TaskReportProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReportProto.ProtoReflect.Descriptor instead.
func (*TaskReportProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{6}
}

func (x *TaskReportProto) GetTaskId() *TaskIdProto {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskReportProto) GetTaskState() TaskStateProto {
	if x != nil && x.TaskState != nil {
		return *x.TaskState
	}
	return TaskStateProto_TS_NEW
}

func (x *TaskReportProto) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *TaskReportProto) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *TaskReportProto) GetFinishTime() int64 {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return 0
}

func (x *TaskReportProto) GetCounters() *CountersProto {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *TaskReportProto) GetRunningAttempts() []*TaskAttemptIdProto {
	if x != nil {
		return x.RunningAttempts
	}
	return nil
}

func (x *TaskReportProto) GetSuccessfulAttempt() *TaskAttemptIdProto {
	if x != nil {
		return x.SuccessfulAttempt
	}
	return nil
}

func (x *TaskReportProto) GetDiagnostics() []string {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type TaskAttemptReportProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskAttemptId       *TaskAttemptIdProto    `protobuf:"bytes,1,opt,name=task_attempt_id,json=taskAttemptId" json:"task_attempt_id,omitempty"`
	TaskAttemptState    *TaskAttemptStateProto `protobuf:"varint,2,opt,name=task_attempt_state,json=taskAttemptState,enum=hadoop.mapreduce.TaskAttemptStateProto" json:"task_attempt_state,omitempty"`
	Progress            *float32               `protobuf:"fixed32,3,opt,name=progress" json:"progress,omitempty"`
	StartTime           *int64                 `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime          *int64                 `protobuf:"varint,5,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	Counters            *CountersProto         `protobuf:"bytes,6,opt,name=counters" json:"counters,omitempty"`
	DiagnosticInfo      *string                `protobuf:"bytes,7,opt,name=diagnostic_info,json=diagnosticInfo" json:"diagnostic_info,omitempty"`
	StateString         *string                `protobuf:"bytes,8,opt,name=state_string,json=stateString" json:"state_string,omitempty"`
	Phase               *PhaseProto            `protobuf:"varint,9,opt,name=phase,enum=hadoop.mapreduce.PhaseProto" json:"phase,omitempty"`
	ShuffleFinishTime   *int64                 `protobuf:"varint,10,opt,name=shuffle_finish_time,json=shuffleFinishTime" json:"shuffle_finish_time,omitempty"`
	SortFinishTime      *int64                 `protobuf:"varint,11,opt,name=sort_finish_time,json=sortFinishTime" json:"sort_finish_time,omitempty"`
	NodeManagerHost     *string                `protobuf:"bytes,12,opt,name=node_manager_host,json=nodeManagerHost" json:"node_manager_host,omitempty"`
	NodeManagerPort     *int32                 `protobuf:"varint,13,opt,name=node_manager_port,json=nodeManagerPort" json:"node_manager_port,omitempty"`
	NodeManagerHttpPort *int32                 `protobuf:"varint,14,opt,name=node_manager_http_port,json=nodeManagerHttpPort" json:"node_manager_http_port,omitempty"`
	ContainerId         *api.ContainerIdProto  `protobuf:"bytes,15,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (x *TaskAttemptReportProto) Reset() {
	*x = TaskAttemptReportProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAttemptReportProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAttemptReportProto) ProtoMessage() {}

func (x *TaskAttemptReportProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAttemptReportProto.ProtoReflect.Descriptor instead.
func (*TaskAttemptReportProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{7}
}

func (x *TaskAttemptReportProto) GetTaskAttemptId() *TaskAttemptIdProto {
	if x != nil {
		return x.TaskAttemptId
	}
	return nil
}

func (x *TaskAttemptReportProto) GetTaskAttemptState() TaskAttemptStateProto {
	if x != nil && x.TaskAttemptState != nil {
		return *x.TaskAttemptState
	}
	return TaskAttemptStateProto_TA_NEW
}

func (x *TaskAttemptReportProto) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *TaskAttemptReportProto) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *TaskAttemptReportProto) GetFinishTime() int64 {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return 0
}

func (x *TaskAttemptReportProto) GetCounters() *CountersProto {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *TaskAttemptReportProto) GetDiagnosticInfo() string {
	if x != nil && x.DiagnosticInfo != nil {
		return *x.DiagnosticInfo
	}
	return ""
}

func (x *TaskAttemptReportProto) GetStateString() string {
	if x != nil && x.StateString != nil {
		return *x.StateString
	}
	return ""
}

func (x *TaskAttemptReportProto) GetPhase() PhaseProto {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return PhaseProto_P_STARTING
}

func (x *TaskAttemptReportProto) GetShuffleFinishTime() int64 {
	if x != nil && x.ShuffleFinishTime != nil {
		return *x.ShuffleFinishTime
	}
	return 0
}

func (x *TaskAttemptReportProto) GetSortFinishTime() int64 {
	if x != nil && x.SortFinishTime != nil {
		return *x.SortFinishTime
	}
	return 0
}

func (x *TaskAttemptReportProto) GetNodeManagerHost() string {
	if x != nil && x.NodeManagerHost != nil {
		return *x.NodeManagerHost
	}
	return ""
}

func (x *TaskAttemptReportProto) GetNodeManagerPort() int32 {
	if x != nil && x.NodeManagerPort != nil {
		return *x.NodeManagerPort
	}
	return 0
}

func (x *TaskAttemptReportProto) GetNodeManagerHttpPort() int32 {
	if x != nil && x.NodeManagerHttpPort != nil {
		return *x.NodeManagerHttpPort
	}
	return 0
}

func (x *TaskAttemptReportProto) GetContainerId() *api.ContainerIdProto {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

type JobReportProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId           *JobIdProto        `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	JobState        *JobStateProto     `protobuf:"varint,2,opt,name=job_state,json=jobState,enum=hadoop.mapreduce.JobStateProto" json:"job_state,omitempty"`
	MapProgress     *float32           `protobuf:"fixed32,3,opt,name=map_progress,json=mapProgress" json:"map_progress,omitempty"`
	ReduceProgress  *float32           `protobuf:"fixed32,4,opt,name=reduce_progress,json=reduceProgress" json:"reduce_progress,omitempty"`
	CleanupProgress *float32           `protobuf:"fixed32,5,opt,name=cleanup_progress,json=cleanupProgress" json:"cleanup_progress,omitempty"`
	SetupProgress   *float32           `protobuf:"fixed32,6,opt,name=setup_progress,json=setupProgress" json:"setup_progress,omitempty"`
	StartTime       *int64             `protobuf:"varint,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime      *int64             `protobuf:"varint,8,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	User            *string            `protobuf:"bytes,9,opt,name=user" json:"user,omitempty"`
	JobName         *string            `protobuf:"bytes,10,opt,name=jobName" json:"jobName,omitempty"`
	TrackingUrl     *string            `protobuf:"bytes,11,opt,name=trackingUrl" json:"trackingUrl,omitempty"`
	Diagnostics     *string            `protobuf:"bytes,12,opt,name=diagnostics" json:"diagnostics,omitempty"`
	JobFile         *string            `protobuf:"bytes,13,opt,name=jobFile" json:"jobFile,omitempty"`
	AmInfos         []*AMInfoProto     `protobuf:"bytes,14,rep,name=am_infos,json=amInfos" json:"am_infos,omitempty"`
	SubmitTime      *int64             `protobuf:"varint,15,opt,name=submit_time,json=submitTime" json:"submit_time,omitempty"`
	IsUber          *bool              `protobuf:"varint,16,opt,name=is_uber,json=isUber,def=0" json:"is_uber,omitempty"`
	JobPriority     *api.PriorityProto `protobuf:"bytes,17,opt,name=jobPriority" json:"jobPriority,omitempty"`
	HistoryFile     *string            `protobuf:"bytes,18,opt,name=historyFile" json:"historyFile,omitempty"`
}

// Default values for JobReportProto fields.
const (
	Default_JobReportProto_IsUber = bool(false)
)

func (x *JobReportProto) Reset() {
	*x = JobReportProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobReportProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobReportProto) ProtoMessage() {}

func (x *JobReportProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobReportProto.ProtoReflect.Descriptor instead.
func (*JobReportProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{8}
}

func (x *JobReportProto) GetJobId() *JobIdProto {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobReportProto) GetJobState() JobStateProto {
	if x != nil && x.JobState != nil {
		return *x.JobState
	}
	return JobStateProto_J_NEW
}

func (x *JobReportProto) GetMapProgress() float32 {
	if x != nil && x.MapProgress != nil {
		return *x.MapProgress
	}
	return 0
}

func (x *JobReportProto) GetReduceProgress() float32 {
	if x != nil && x.ReduceProgress != nil {
		return *x.ReduceProgress
	}
	return 0
}

func (x *JobReportProto) GetCleanupProgress() float32 {
	if x != nil && x.CleanupProgress != nil {
		return *x.CleanupProgress
	}
	return 0
}

func (x *JobReportProto) GetSetupProgress() float32 {
	if x != nil && x.SetupProgress != nil {
		return *x.SetupProgress
	}
	return 0
}

func (x *JobReportProto) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *JobReportProto) GetFinishTime() int64 {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return 0
}

func (x *JobReportProto) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *JobReportProto) GetJobName() string {
	if x != nil && x.JobName != nil {
		return *x.JobName
	}
	return ""
}

func (x *JobReportProto) GetTrackingUrl() string {
	if x != nil && x.TrackingUrl != nil {
		return *x.TrackingUrl
	}
	return ""
}

func (x *JobReportProto) GetDiagnostics() string {
	if x != nil && x.Diagnostics != nil {
		return *x.Diagnostics
	}
	return ""
}

func (x *JobReportProto) GetJobFile() string {
	if x != nil && x.JobFile != nil {
		return *x.JobFile
	}
	return ""
}

func (x *JobReportProto) GetAmInfos() []*AMInfoProto {
	if x != nil {
		return x.AmInfos
	}
	return nil
}

func (x *JobReportProto) GetSubmitTime() int64 {
	if x != nil && x.SubmitTime != nil {
		return *x.SubmitTime
	}
	return 0
}

func (x *JobReportProto) GetIsUber() bool {
	if x != nil && x.IsUber != nil {
		return *x.IsUber
	}
	return Default_JobReportProto_IsUber
}

func (x *JobReportProto) GetJobPriority() *api.PriorityProto {
	if x != nil {
		return x.JobPriority
	}
	return nil
}

func (x *JobReportProto) GetHistoryFile() string {
	if x != nil && x.HistoryFile != nil {
		return *x.HistoryFile
	}
	return ""
}

type AMInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationAttemptId *api.ApplicationAttemptIdProto `protobuf:"bytes,1,opt,name=application_attempt_id,json=applicationAttemptId" json:"application_attempt_id,omitempty"`
	StartTime            *int64                         `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	ContainerId          *api.ContainerIdProto          `protobuf:"bytes,3,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	NodeManagerHost      *string                        `protobuf:"bytes,4,opt,name=node_manager_host,json=nodeManagerHost" json:"node_manager_host,omitempty"`
	NodeManagerPort      *int32                         `protobuf:"varint,5,opt,name=node_manager_port,json=nodeManagerPort" json:"node_manager_port,omitempty"`
	NodeManagerHttpPort  *int32                         `protobuf:"varint,6,opt,name=node_manager_http_port,json=nodeManagerHttpPort" json:"node_manager_http_port,omitempty"`
}

func (x *AMInfoProto) Reset() {
	*x = AMInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMInfoProto) ProtoMessage() {}

func (x *AMInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMInfoProto.ProtoReflect.Descriptor instead.
func (*AMInfoProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{9}
}

func (x *AMInfoProto) GetApplicationAttemptId() *api.ApplicationAttemptIdProto {
	if x != nil {
		return x.ApplicationAttemptId
	}
	return nil
}

func (x *AMInfoProto) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *AMInfoProto) GetContainerId() *api.ContainerIdProto {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

func (x *AMInfoProto) GetNodeManagerHost() string {
	if x != nil && x.NodeManagerHost != nil {
		return *x.NodeManagerHost
	}
	return ""
}

func (x *AMInfoProto) GetNodeManagerPort() int32 {
	if x != nil && x.NodeManagerPort != nil {
		return *x.NodeManagerPort
	}
	return 0
}

func (x *AMInfoProto) GetNodeManagerHttpPort() int32 {
	if x != nil && x.NodeManagerHttpPort != nil {
		return *x.NodeManagerHttpPort
	}
	return 0
}

type TaskAttemptCompletionEventProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttemptId              *TaskAttemptIdProto                    `protobuf:"bytes,1,opt,name=attempt_id,json=attemptId" json:"attempt_id,omitempty"`
	Status                 *TaskAttemptCompletionEventStatusProto `protobuf:"varint,2,opt,name=status,enum=hadoop.mapreduce.TaskAttemptCompletionEventStatusProto" json:"status,omitempty"`
	MapOutputServerAddress *string                                `protobuf:"bytes,3,opt,name=map_output_server_address,json=mapOutputServerAddress" json:"map_output_server_address,omitempty"`
	AttemptRunTime         *int32                                 `protobuf:"varint,4,opt,name=attempt_run_time,json=attemptRunTime" json:"attempt_run_time,omitempty"`
	EventId                *int32                                 `protobuf:"varint,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (x *TaskAttemptCompletionEventProto) Reset() {
	*x = TaskAttemptCompletionEventProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAttemptCompletionEventProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAttemptCompletionEventProto) ProtoMessage() {}

func (x *TaskAttemptCompletionEventProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAttemptCompletionEventProto.ProtoReflect.Descriptor instead.
func (*TaskAttemptCompletionEventProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{10}
}

func (x *TaskAttemptCompletionEventProto) GetAttemptId() *TaskAttemptIdProto {
	if x != nil {
		return x.AttemptId
	}
	return nil
}

func (x *TaskAttemptCompletionEventProto) GetStatus() TaskAttemptCompletionEventStatusProto {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TaskAttemptCompletionEventStatusProto_TACE_FAILED
}

func (x *TaskAttemptCompletionEventProto) GetMapOutputServerAddress() string {
	if x != nil && x.MapOutputServerAddress != nil {
		return *x.MapOutputServerAddress
	}
	return ""
}

func (x *TaskAttemptCompletionEventProto) GetAttemptRunTime() int32 {
	if x != nil && x.AttemptRunTime != nil {
		return *x.AttemptRunTime
	}
	return 0
}

func (x *TaskAttemptCompletionEventProto) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type StringCounterMapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string       `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *CounterProto `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *StringCounterMapProto) Reset() {
	*x = StringCounterMapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringCounterMapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringCounterMapProto) ProtoMessage() {}

func (x *StringCounterMapProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringCounterMapProto.ProtoReflect.Descriptor instead.
func (*StringCounterMapProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{11}
}

func (x *StringCounterMapProto) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *StringCounterMapProto) GetValue() *CounterProto {
	if x != nil {
		return x.Value
	}
	return nil
}

type StringCounterGroupMapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *CounterGroupProto `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *StringCounterGroupMapProto) Reset() {
	*x = StringCounterGroupMapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mr_protos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringCounterGroupMapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringCounterGroupMapProto) ProtoMessage() {}

func (x *StringCounterGroupMapProto) ProtoReflect() protoreflect.Message {
	mi := &file_mr_protos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringCounterGroupMapProto.ProtoReflect.Descriptor instead.
func (*StringCounterGroupMapProto) Descriptor() ([]byte, []int) {
	return file_mr_protos_proto_rawDescGZIP(), []int{12}
}

func (x *StringCounterGroupMapProto) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *StringCounterGroupMapProto) GetValue() *CounterGroupProto {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_mr_protos_proto protoreflect.FileDescriptor

var file_mr_protos_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x1a, 0x11, 0x79, 0x61, 0x72, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x79, 0x61,
	0x72, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a,
	0x0b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e,
	0x4a, 0x6f, 0x62, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61,
	0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x5c, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a,
	0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x64, 0x0a, 0x0d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x53, 0x0a,
	0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d,
	0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x22, 0xeb, 0x03, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d,
	0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0xff, 0x05, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4c, 0x0a, 0x0f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61,
	0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x12, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d,
	0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10,
	0x74, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61,
	0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x6f, 0x64,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x79, 0x61, 0x72, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xc8, 0x05, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d,
	0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61,
	0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x41, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x07, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x75, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x69, 0x73, 0x55, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x0b, 0x6a, 0x6f, 0x62, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x79, 0x61, 0x72, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b,
	0x6a, 0x6f, 0x62, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xd9, 0x02,
	0x0a, 0x0b, 0x41, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5c, 0x0a,
	0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x79, 0x61, 0x72, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x79, 0x61, 0x72, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x1f, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x43, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a,
	0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x53, 0x5f, 0x4e, 0x45,
	0x57, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x53, 0x5f, 0x4b, 0x49, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x5f, 0x0a, 0x0a, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x5f, 0x53, 0x48, 0x55, 0x46, 0x46, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x5f, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x4e, 0x55, 0x50, 0x10, 0x06, 0x2a, 0x8b, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x41, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x5f, 0x4b, 0x49, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x07, 0x2a, 0x71, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x4a, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x4a, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x4a, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x4a, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x2a, 0x84, 0x01, 0x0a, 0x25, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x43, 0x45, 0x5f,
	0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x49, 0x50, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x42, 0x6b,
	0x0a, 0x24, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x08, 0x4d, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6f, 0x6d,
	0x30, 0x30, 0x35, 0x35, 0x2f, 0x67, 0x6f, 0x2d, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x72, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0xa0, 0x01, 0x01,
}

var (
	file_mr_protos_proto_rawDescOnce sync.Once
	file_mr_protos_proto_rawDescData = file_mr_protos_proto_rawDesc
)

func file_mr_protos_proto_rawDescGZIP() []byte {
	file_mr_protos_proto_rawDescOnce.Do(func() {
		file_mr_protos_proto_rawDescData = protoimpl.X.CompressGZIP(file_mr_protos_proto_rawDescData)
	})
	return file_mr_protos_proto_rawDescData
}

var file_mr_protos_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_mr_protos_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mr_protos_proto_goTypes = []interface{}{
	(TaskTypeProto)(0),                         // 0: hadoop.mapreduce.TaskTypeProto
	(TaskStateProto)(0),                        // 1: hadoop.mapreduce.TaskStateProto
	(PhaseProto)(0),                            // 2: hadoop.mapreduce.PhaseProto
	(TaskAttemptStateProto)(0),                 // 3: hadoop.mapreduce.TaskAttemptStateProto
	(JobStateProto)(0),                         // 4: hadoop.mapreduce.JobStateProto
	(TaskAttemptCompletionEventStatusProto)(0), // 5: hadoop.mapreduce.TaskAttemptCompletionEventStatusProto
	(*JobIdProto)(nil),                         // 6: hadoop.mapreduce.JobIdProto
	(*TaskIdProto)(nil),                        // 7: hadoop.mapreduce.TaskIdProto
	(*TaskAttemptIdProto)(nil),                 // 8: hadoop.mapreduce.TaskAttemptIdProto
	(*CounterProto)(nil),                       // 9: hadoop.mapreduce.CounterProto
	(*CounterGroupProto)(nil),                  // 10: hadoop.mapreduce.CounterGroupProto
	(*CountersProto)(nil),                      // 11: hadoop.mapreduce.CountersProto
	(*TaskReportProto)(nil),                    // 12: hadoop.mapreduce.TaskReportProto
	(*TaskAttemptReportProto)(nil),             // 13: hadoop.mapreduce.TaskAttemptReportProto
	(*JobReportProto)(nil),                     // 14: hadoop.mapreduce.JobReportProto
	(*AMInfoProto)(nil),                        // 15: hadoop.mapreduce.AMInfoProto
	(*TaskAttemptCompletionEventProto)(nil),    // 16: hadoop.mapreduce.TaskAttemptCompletionEventProto
	(*StringCounterMapProto)(nil),              // 17: hadoop.mapreduce.StringCounterMapProto
	(*StringCounterGroupMapProto)(nil),         // 18: hadoop.mapreduce.StringCounterGroupMapProto
	(*api.ApplicationIdProto)(nil),             // 19: hadoop.yarn.ApplicationIdProto
	(*api.ContainerIdProto)(nil),               // 20: hadoop.yarn.ContainerIdProto
	(*api.PriorityProto)(nil),                  // 21: hadoop.yarn.PriorityProto
	(*api.ApplicationAttemptIdProto)(nil),      // 22: hadoop.yarn.ApplicationAttemptIdProto
}
var file_mr_protos_proto_depIdxs = []int32{
	19, // 0: hadoop.mapreduce.JobIdProto.app_id:type_name -> hadoop.yarn.ApplicationIdProto
	6,  // 1: hadoop.mapreduce.TaskIdProto.job_id:type_name -> hadoop.mapreduce.JobIdProto
	0,  // 2: hadoop.mapreduce.TaskIdProto.task_type:type_name -> hadoop.mapreduce.TaskTypeProto
	7,  // 3: hadoop.mapreduce.TaskAttemptIdProto.task_id:type_name -> hadoop.mapreduce.TaskIdProto
	17, // 4: hadoop.mapreduce.CounterGroupProto.counters:type_name -> hadoop.mapreduce.StringCounterMapProto
	18, // 5: hadoop.mapreduce.CountersProto.counter_groups:type_name -> hadoop.mapreduce.StringCounterGroupMapProto
	7,  // 6: hadoop.mapreduce.TaskReportProto.task_id:type_name -> hadoop.mapreduce.TaskIdProto
	1,  // 7: hadoop.mapreduce.TaskReportProto.task_state:type_name -> hadoop.mapreduce.TaskStateProto
	11, // 8: hadoop.mapreduce.TaskReportProto.counters:type_name -> hadoop.mapreduce.CountersProto
	8,  // 9: hadoop.mapreduce.TaskReportProto.running_attempts:type_name -> hadoop.mapreduce.TaskAttemptIdProto
	8,  // 10: hadoop.mapreduce.TaskReportProto.successful_attempt:type_name -> hadoop.mapreduce.TaskAttemptIdProto
	8,  // 11: hadoop.mapreduce.TaskAttemptReportProto.task_attempt_id:type_name -> hadoop.mapreduce.TaskAttemptIdProto
	3,  // 12: hadoop.mapreduce.TaskAttemptReportProto.task_attempt_state:type_name -> hadoop.mapreduce.TaskAttemptStateProto
	11, // 13: hadoop.mapreduce.TaskAttemptReportProto.counters:type_name -> hadoop.mapreduce.CountersProto
	2,  // 14: hadoop.mapreduce.TaskAttemptReportProto.phase:type_name -> hadoop.mapreduce.PhaseProto
	20, // 15: hadoop.mapreduce.TaskAttemptReportProto.container_id:type_name -> hadoop.yarn.ContainerIdProto
	6,  // 16: hadoop.mapreduce.JobReportProto.job_id:type_name -> hadoop.mapreduce.JobIdProto
	4,  // 17: hadoop.mapreduce.JobReportProto.job_state:type_name -> hadoop.mapreduce.JobStateProto
	15, // 18: hadoop.mapreduce.JobReportProto.am_infos:type_name -> hadoop.mapreduce.AMInfoProto
	21, // 19: hadoop.mapreduce.JobReportProto.jobPriority:type_name -> hadoop.yarn.PriorityProto
	22, // 20: hadoop.mapreduce.AMInfoProto.application_attempt_id:type_name -> hadoop.yarn.ApplicationAttemptIdProto
	20, // 21: hadoop.mapreduce.AMInfoProto.container_id:type_name -> hadoop.yarn.ContainerIdProto
	8,  // 22: hadoop.mapreduce.TaskAttemptCompletionEventProto.attempt_id:type_name -> hadoop.mapreduce.TaskAttemptIdProto
	5,  // 23: hadoop.mapreduce.TaskAttemptCompletionEventProto.status:type_name -> hadoop.mapreduce.TaskAttemptCompletionEventStatusProto
	9,  // 24: hadoop.mapreduce.StringCounterMapProto.value:type_name -> hadoop.mapreduce.CounterProto
	10, // 25: hadoop.mapreduce.StringCounterGroupMapProto.value:type_name -> hadoop.mapreduce.CounterGroupProto
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_mr_protos_proto_init() }
func file_mr_protos_proto_init() {
	if File_mr_protos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mr_protos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobIdProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIdProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAttemptIdProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterGroupProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountersProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReportProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAttemptReportProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobReportProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAttemptCompletionEventProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringCounterMapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mr_protos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringCounterGroupMapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mr_protos_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mr_protos_proto_goTypes,
		DependencyIndexes: file_mr_protos_proto_depIdxs,
		EnumInfos:         file_mr_protos_proto_enumTypes,
		MessageInfos:      file_mr_protos_proto_msgTypes,
	}.Build()
	File_mr_protos_proto = out.File
	file_mr_protos_proto_rawDesc = nil
	file_mr_protos_proto_goTypes = nil
	file_mr_protos_proto_depIdxs = nil
}
