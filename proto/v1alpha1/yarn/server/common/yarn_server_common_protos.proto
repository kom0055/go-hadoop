/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";

package github.com.kom0055.go_hadoop.v1alpha1.yarn.server.common;
option go_package = "github.com/kom0055/go-hadoop/proto/v1alpha1/yarn/server/common";

import "github.com/kom0055/go-hadoop/proto/v1alpha1/yarn/api/yarn_protos.proto";

enum NodeActionProto {
  NORMAL = 0;
  RESYNC = 1;
  SHUTDOWN = 2;
}

message NodeStatusProto {
  optional github.com.kom0055.go_hadoop.v1alpha1.yarn.api.NodeIdProto node_id = 1;
  optional int32 response_id = 2;
  repeated github.com.kom0055.go_hadoop.v1alpha1.yarn.api.ContainerStatusProto containersStatuses = 3;
  optional NodeHealthStatusProto nodeHealthStatus = 4;
  repeated github.com.kom0055.go_hadoop.v1alpha1.yarn.api.ApplicationIdProto keep_alive_applications = 5;
  optional github.com.kom0055.go_hadoop.v1alpha1.yarn.api.ResourceUtilizationProto containers_utilization = 6;
  optional github.com.kom0055.go_hadoop.v1alpha1.yarn.api.ResourceUtilizationProto node_utilization = 7;
  repeated github.com.kom0055.go_hadoop.v1alpha1.yarn.api.ContainerProto increased_containers = 8;
  optional OpportunisticContainersStatusProto opportunistic_containers_status = 9;
}

message OpportunisticContainersStatusProto {
  optional int32 running_opport_containers = 1;
  optional int64 opport_memory_used = 2;
  optional int32 opport_cores_used = 3;
  optional int32 queued_opport_containers = 4;
  optional int32 wait_queue_length = 5;
  optional int32 estimated_queue_wait_time = 6;
  optional int32 opport_queue_capacity = 7;
}

message MasterKeyProto {
  optional int32 key_id = 1;
  optional bytes bytes = 2;
}

message NodeHealthStatusProto {
  optional bool is_node_healthy = 1;
  optional string health_report = 2;
  optional int64 last_health_report_time = 3;
}

message VersionProto {
  optional int32 major_version = 1;
  optional int32 minor_version = 2;
}

